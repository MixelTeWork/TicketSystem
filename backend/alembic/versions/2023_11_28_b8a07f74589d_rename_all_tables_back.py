"""rename all tables back

Revision ID: b8a07f74589d
Revises: 0f7f9da5f7b8
Create Date: 2023-11-28 20:10:15.038152

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import sqlite

# revision identifiers, used by Alembic.
revision: str = 'b8a07f74589d'
down_revision: Union[str, None] = '0f7f9da5f7b8'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    from alembic import op
    from sqlalchemy.sql import text
    conn = op.get_bind()

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('Event',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('deleted', sa.Boolean(), server_default='0', nullable=False),
    sa.Column('name', sa.String(length=64), nullable=False),
    sa.Column('date', sa.DateTime(), nullable=False),
    sa.Column('active', sa.Boolean(), server_default='1', nullable=False),
    sa.Column('lastTicketNumber', sa.Integer(), server_default='0', nullable=False),
    sa.Column('lastTypeNumber', sa.Integer(), server_default='0', nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_Event')),
    sa.UniqueConstraint('id', name=op.f('uq_Event_id'))
    )
    conn.execute(text("""insert into Event select * from Event_"""))
    op.create_table('Operation',
    sa.Column('id', sa.String(length=32), nullable=False),
    sa.Column('name', sa.String(length=32), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_Operation')),
    sa.UniqueConstraint('id', name=op.f('uq_Operation_id'))
    )
    conn.execute(text("""insert into Operation select * from Operation_"""))
    op.create_table('Role',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('deleted', sa.Boolean(), server_default='0', nullable=False),
    sa.Column('name', sa.String(length=32), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_Role')),
    sa.UniqueConstraint('id', name=op.f('uq_Role_id'))
    )
    conn.execute(text("""insert into Role select * from Role_"""))
    op.create_table('Permission',
    sa.Column('roleId', sa.Integer(), nullable=False),
    sa.Column('operationId', sa.String(length=32), nullable=False),
    sa.ForeignKeyConstraint(['operationId'], ['Operation.id'], name=op.f('fk_Permission_operationId_Operation')),
    sa.ForeignKeyConstraint(['roleId'], ['Role.id'], name=op.f('fk_Permission_roleId_Role')),
    sa.PrimaryKeyConstraint('roleId', 'operationId', name=op.f('pk_Permission'))
    )
    conn.execute(text("""insert into Permission select * from Permission_"""))
    op.create_table('TicketType',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('deleted', sa.Boolean(), server_default='0', nullable=False),
    sa.Column('eventId', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=64), nullable=False),
    sa.Column('number', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['eventId'], ['Event.id'], name=op.f('fk_TicketType_eventId_Event')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_TicketType')),
    sa.UniqueConstraint('id', name=op.f('uq_TicketType_id'))
    )
    conn.execute(text("""insert into TicketType select * from TicketType_"""))
    op.create_table('User',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('deleted', sa.Boolean(), server_default='0', nullable=False),
    sa.Column('login', sa.String(length=64), nullable=False),
    sa.Column('name', sa.String(length=64), nullable=False),
    sa.Column('password', sa.String(length=128), nullable=False),
    sa.Column('roleId', sa.Integer(), nullable=False),
    sa.Column('bossId', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['bossId'], ['User.id'], name=op.f('fk_User_bossId_User')),
    sa.ForeignKeyConstraint(['roleId'], ['Role.id'], name=op.f('fk_User_roleId_Role')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_User')),
    sa.UniqueConstraint('id', name=op.f('uq_User_id'))
    )
    conn.execute(text("""insert into User select * from User_"""))
    with op.batch_alter_table('User', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_User_login'), ['login'], unique=True)

    op.create_table('Log',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('date', sa.DateTime(), nullable=False),
    sa.Column('actionCode', sa.String(length=16), nullable=False),
    sa.Column('userId', sa.Integer(), nullable=False),
    sa.Column('userName', sa.String(length=64), nullable=False),
    sa.Column('tableName', sa.String(length=16), nullable=False),
    sa.Column('recordId', sa.Integer(), nullable=False),
    sa.Column('changes', sa.JSON(), nullable=False),
    sa.ForeignKeyConstraint(['userId'], ['User.id'], name=op.f('fk_Log_userId_User')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_Log')),
    sa.UniqueConstraint('id', name=op.f('uq_Log_id'))
    )
    conn.execute(text("""insert into Log select * from Log_"""))
    op.create_table('PermissionAccess',
    sa.Column('userId', sa.Integer(), nullable=False),
    sa.Column('eventId', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['eventId'], ['Event.id'], name=op.f('fk_PermissionAccess_eventId_Event')),
    sa.ForeignKeyConstraint(['userId'], ['User.id'], name=op.f('fk_PermissionAccess_userId_User')),
    sa.PrimaryKeyConstraint('userId', 'eventId', name=op.f('pk_PermissionAccess'))
    )
    conn.execute(text("""insert into PermissionAccess select * from PermissionAccess_"""))
    op.create_table('Ticket',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('deleted', sa.Boolean(), server_default='0', nullable=False),
    sa.Column('createdDate', sa.DateTime(), nullable=False),
    sa.Column('createdById', sa.Integer(), nullable=False),
    sa.Column('eventId', sa.Integer(), nullable=False),
    sa.Column('typeId', sa.Integer(), nullable=False),
    sa.Column('code', sa.String(length=32), nullable=False),
    sa.Column('scanned', sa.Boolean(), server_default='0', nullable=False),
    sa.Column('updatedDate', sa.DateTime(), nullable=True),
    sa.Column('updatedById', sa.Integer(), nullable=True),
    sa.Column('scannedDate', sa.DateTime(), nullable=True),
    sa.Column('scannedById', sa.Integer(), nullable=True),
    sa.Column('personName', sa.String(length=256), nullable=True),
    sa.Column('personLink', sa.String(length=256), nullable=True),
    sa.Column('promocode', sa.String(length=64), nullable=True),
    sa.ForeignKeyConstraint(['createdById'], ['User.id'], name=op.f('fk_Ticket_createdById_User')),
    sa.ForeignKeyConstraint(['eventId'], ['Event.id'], name=op.f('fk_Ticket_eventId_Event')),
    sa.ForeignKeyConstraint(['scannedById'], ['User.id'], name=op.f('fk_Ticket_scannedById_User')),
    sa.ForeignKeyConstraint(['typeId'], ['TicketType.id'], name=op.f('fk_Ticket_typeId_TicketType')),
    sa.ForeignKeyConstraint(['updatedById'], ['User.id'], name=op.f('fk_Ticket_updatedById_User')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_Ticket')),
    sa.UniqueConstraint('code', name=op.f('uq_Ticket_code')),
    sa.UniqueConstraint('id', name=op.f('uq_Ticket_id'))
    )
    conn.execute(text("""insert into Ticket select * from Ticket_"""))
    op.drop_table('Event_')
    op.drop_table('Ticket_')
    op.drop_table('Permission_')
    op.drop_table('TicketType_')
    with op.batch_alter_table('User_', schema=None) as batch_op:
        batch_op.drop_index('ix_User__login')

    op.drop_table('User_')
    op.drop_table('Log_')
    op.drop_table('Role_')
    op.drop_table('Operation_')
    op.drop_table('PermissionAccess_')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('PermissionAccess_',
    sa.Column('userId', sa.INTEGER(), nullable=False),
    sa.Column('eventId', sa.INTEGER(), nullable=False),
    sa.ForeignKeyConstraint(['eventId'], ['Event_.id'], ),
    sa.ForeignKeyConstraint(['userId'], ['User_.id'], ),
    sa.PrimaryKeyConstraint('userId', 'eventId')
    )
    op.create_table('Operation_',
    sa.Column('id', sa.VARCHAR(length=32), nullable=False),
    sa.Column('name', sa.VARCHAR(length=32), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id', name='uq_Operation__id')
    )
    op.create_table('Role_',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('deleted', sa.BOOLEAN(), server_default=sa.text("'0'"), nullable=False),
    sa.Column('name', sa.VARCHAR(length=32), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id', name='uq_Role__id')
    )
    op.create_table('Log_',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('date', sa.DATETIME(), nullable=False),
    sa.Column('actionCode', sa.VARCHAR(length=16), nullable=False),
    sa.Column('userId', sa.INTEGER(), nullable=False),
    sa.Column('userName', sa.VARCHAR(length=64), nullable=False),
    sa.Column('tableName', sa.VARCHAR(length=16), nullable=False),
    sa.Column('recordId', sa.INTEGER(), nullable=False),
    sa.Column('changes', sqlite.JSON(), nullable=False),
    sa.ForeignKeyConstraint(['userId'], ['User_.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id', name='uq_Log__id')
    )
    op.create_table('User_',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('deleted', sa.BOOLEAN(), server_default=sa.text("'0'"), nullable=False),
    sa.Column('login', sa.VARCHAR(length=64), nullable=False),
    sa.Column('name', sa.VARCHAR(length=64), nullable=False),
    sa.Column('password', sa.VARCHAR(length=128), nullable=False),
    sa.Column('roleId', sa.INTEGER(), nullable=False),
    sa.Column('bossId', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['bossId'], ['User_.id'], ),
    sa.ForeignKeyConstraint(['roleId'], ['Role_.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id', name='uq_User__id')
    )
    with op.batch_alter_table('User_', schema=None) as batch_op:
        batch_op.create_index('ix_User__login', ['login'], unique=False)

    op.create_table('TicketType_',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('deleted', sa.BOOLEAN(), server_default=sa.text("'0'"), nullable=False),
    sa.Column('eventId', sa.INTEGER(), nullable=False),
    sa.Column('name', sa.VARCHAR(length=64), nullable=False),
    sa.Column('number', sa.INTEGER(), nullable=False),
    sa.ForeignKeyConstraint(['eventId'], ['Event_.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id', name='uq_TicketType__id')
    )
    op.create_table('Permission_',
    sa.Column('roleId', sa.INTEGER(), nullable=False),
    sa.Column('operationId', sa.VARCHAR(length=32), nullable=False),
    sa.ForeignKeyConstraint(['operationId'], ['Operation_.id'], ),
    sa.ForeignKeyConstraint(['roleId'], ['Role_.id'], ),
    sa.PrimaryKeyConstraint('roleId', 'operationId')
    )
    op.create_table('Ticket_',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('deleted', sa.BOOLEAN(), server_default=sa.text("'0'"), nullable=False),
    sa.Column('createdDate', sa.DATETIME(), nullable=False),
    sa.Column('createdById', sa.INTEGER(), nullable=False),
    sa.Column('eventId', sa.INTEGER(), nullable=False),
    sa.Column('typeId', sa.INTEGER(), nullable=False),
    sa.Column('code', sa.VARCHAR(length=32), nullable=False),
    sa.Column('scanned', sa.BOOLEAN(), server_default=sa.text("'0'"), nullable=False),
    sa.Column('updatedDate', sa.DATETIME(), nullable=True),
    sa.Column('updatedById', sa.INTEGER(), nullable=True),
    sa.Column('scannedDate', sa.DATETIME(), nullable=True),
    sa.Column('scannedById', sa.INTEGER(), nullable=True),
    sa.Column('personName', sa.VARCHAR(length=256), nullable=True),
    sa.Column('personLink', sa.VARCHAR(length=256), nullable=True),
    sa.Column('promocode', sa.VARCHAR(length=64), nullable=True),
    sa.ForeignKeyConstraint(['createdById'], ['User_.id'], ),
    sa.ForeignKeyConstraint(['eventId'], ['Event_.id'], ),
    sa.ForeignKeyConstraint(['scannedById'], ['User_.id'], ),
    sa.ForeignKeyConstraint(['typeId'], ['TicketType_.id'], ),
    sa.ForeignKeyConstraint(['updatedById'], ['User_.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('code', name='uq_Ticket__code'),
    sa.UniqueConstraint('id', name='uq_Ticket__id')
    )
    op.create_table('Event_',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('deleted', sa.BOOLEAN(), server_default=sa.text("'0'"), nullable=False),
    sa.Column('name', sa.VARCHAR(length=64), nullable=False),
    sa.Column('date', sa.DATETIME(), nullable=False),
    sa.Column('active', sa.BOOLEAN(), server_default=sa.text("'1'"), nullable=False),
    sa.Column('lastTicketNumber', sa.INTEGER(), server_default=sa.text("'0'"), nullable=False),
    sa.Column('lastTypeNumber', sa.INTEGER(), server_default=sa.text("'0'"), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id', name='uq_Event__id')
    )
    op.drop_table('Ticket')
    op.drop_table('PermissionAccess')
    op.drop_table('Log')
    with op.batch_alter_table('User', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_User_login'))

    op.drop_table('User')
    op.drop_table('TicketType')
    op.drop_table('Permission')
    op.drop_table('Role')
    op.drop_table('Operation')
    op.drop_table('Event')
    # ### end Alembic commands ###
